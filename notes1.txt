fun main(){
   println("hello world")
}
o/t = hello world
JDK converts kotlin source code to Java Byte Code
JVM converts Java Byte Code to Machine code
Machine code depends on the type of Operating system

### use of variables
fun main(){
   var userName : String = "Isha"
   println("hello $userName")
o/t = hello Isha

### changing value of variable
fun main(){
 var userName : String = "Isha"
 userName = "Isha Nayal"
 println("hello $userName")
o/t hello Isha Nayal

kotlin is static language...ie it checks the variable type at the time of writing code or compile time

val stands for value
its content cannot be changed like we change of var

fun main(){
var userName : String = "Isha"
userName = "Isha Nayal"
println("hello $userName")
val myWork : String = "coding"
println("do $myWork")
o/t hello Isha Nayal
    do coding

kotlin has an inbuild type interface which detects the type of data stored in the variable so we can skip declaring the type of data 

fun main(){
  var userName: String = "Isha"
  val userAge: Int = 18
  println("hello $userName, your age is $userAge")

}

fun main(){
  val integerMaxValue = Int.MAX_VALUE
  val integerMinValue = Int.MIN_VALUE
  println("Integer max value : $integerMaxValue")
  println("Integer min value : $integerMinValue")

}
O/T  Integer max value : 2147483647
Integer min value : -2147483648

if we store value above or below this range in int data type, it shows error


## byte data type
fun main(){
  val byteMaxValue = Byte.MAX_VALUE
  val byteMinValue = Byte.MIN_VALUE
  println("Byte max value : $byteMaxValue")
  println("Byte min value : $byteMinValue")

}

Output: Byte max value : 127
Byte min value : -128
